“””
PROG -> MAIN 

MAIN -> class id ‘{‘ INSIDE_CLASS ‘}’

INSIDE_CLASS -> public static void main ‘(‘ String ‘[‘ ‘]’ id ‘)’ ‘{‘ INSIDE_METODO ‘}’ METODO_X
INSIDE_CLASS -> METODO_X

VAR_X -> VAR_Y VAR_X
VAR_X -> e

METODO_X -> METODO METODO_X
METODO_X -> e

VAR_Y -> TIPO id ;

METODO -> public TIPO id ‘(‘ PARAM_X ‘)’ ‘{‘ INSIDE_METODO ‘}’

PARAM_X -> PARAM PARAM_Y
PARAM_Y -> , PARAM_X
PARAM_Y -> e
PARAM -> TIPO id

*** PROCEDURE!!! ***

INSIDE_METODO -> CMD_X

CMD_X -> CMDS RETURN_X
RETURN_X -> return EXP1 ;
RETURN_X -> e
CMD_X -> e

CMDS -> CMD CMDS
CMDS -> e

TIPO -> int ‘[‘ ‘]’
TIPO -> boolean
TIPO -> int
TIPO -> id

CMD -> ‘{‘ CMDS ‘}’
CMD -> MY_VAR = EXP1 ;
CMD -> if ‘(‘ EXP1 ‘)’ CMD ELSE_X
CMD -> System.out.println ‘(‘ EXP1 ‘)’ ;

MY_VAR -> id
MY_VAR -> id id

ELSE_X -> else CMD
ELSE_X -> e

EXP1 -> REXP EXP_X
EXP1 -> id '(' ')'
EXP_X -> && EXP1
EXP_X -> e

REXP -> AEXP REXP_X
REXP_X -> < REXP
REXP_X -> e

REXP_X -> == REXP
REXP_X -> != REXP


AEXP -> MEXP AEXP_X
AEXP_X -> + AEXP
AEXP_X -> - AEXP
AEXP_X -> e

MEXP -> SEXP MEXP_X
MEXP_X -> * MEXP
MEXP_X -> e

SEXP -> ! SEXP
SEXP -> - SEXP
SEXP -> true
SEXP -> false
SEXP -> num
SEXP -> null
SEXP -> PEXP PONTO_X

PONTO_X -> . length
PONTO_X -> e

PEXP -> this
PEXP -> new id ‘(‘ ‘)’
PEXP -> ‘(‘ EXP1 ‘)’ PEXP_X
PEXP -> id PEXP_X

PEXP_X -> . PEXP
PEXP_X -> '(' EXP1 ')'
PEXP_X -> e

EXPS -> EXP1 EXP_X
EXP_X -> , EXPS

/*****************/


def consume(tok, s):
	w = s[0]
	s = s[1:]
	if w != tok:
		print w, s, tok
		print 10/0
	return s


def PROG(s):
	return MAIN(s)

def MAIN(s):
	s = consume(“class”, s)
	s = consume(“id”, s)
	s = consume(“{“, s)
	s = consume(“public”, s)
	s = consume(“static”, s)
	s = consume(“void”, s)
	s = consume(“main”, s)
	s = consume(“(“, s)
	s = consume(“String”, s)
	s = consume(“[“, s)
	s = consume(“]”, s)
	s = consume(“id”, s)
	s = consume(“)”, s)
	s = consume(“{“, s)
	s = VAR_X(s)
	s = METODO_X(s)
	s = consume(“}”, s)
	s = consume(“}”, s)
	return s

def VAR_X(s):
	if s[0] == “int” || s[0] == “boolean” || s[0] == “int” || s[0] == “id”:
		s = TIPO(s)
		s = VAR_X(s)
		return s
	else:
		return s

def METODO_X(s):
	if s[0] == “public”:
		s = METODO(s)
		s = MEOTOD_X(s)
		return s
	else:
		return s

def VAR(s):
	s = TIPO(s)
	s = consume(“id”, s)
	s = consume(“;”, s)
	return s

def METODO(s):
	s = consume(“public”, s)
	s = TIPO(s)
	s = consume(“id”, s)
	s = consume(“(“, s)
	s = PARAM_X(s)
	s = consume(“)“, s)
	s = consume(“{“, s)
	s = INSIDE_METODO(s)
	s = consume(“}”, s)
	return s

def PARAM_X(s):
	s = PARAM(s)
	s = PARAM_Y(s)
	return s

def PARAM_Y(s):
	s = consume(“,”, s)
	s = PARAM_X(s)
	return s

def PARAM(s):
	s = TIPO(s)
	s = consume(“id”, s)
	return s

def INSIDE_METODO(s):
	s = VAR_X(s)
	s = CMD_X(s)
	return s

def CMD_X(s):
	if s[0] == “{“ || s[0] == “id” || s[0] == “if” || s[0] == “System.out.println”:
		s = CMD(s)
		s = consume(“return”)
		s = EXP(s)
		s = consume(“;”)
		return s
	else:
		return s

def CMDS(s):
	if s[0] == “{“ or s[0] == “id” or s[0] == “if” or s[0] == “System.out.println”:
		s = CMD(s)
		s = CMDS(s)
		return s
	else:
		return s

def TIPO(s):
	if s[0] == “int” and s[1] == “[“:
		s = consume(“int”, s)
		s = consume(“[“, s)
		s = consume(“]”, s)
		return s
	elif s[0] == “boolean”:
		s = consume(“boolean”, s)
		return s
	elif s[0] == “int”:
		s = consume(“int”, s)
		return s
	elif s[0] == “id”:
		s = consume(“id”, s)
		return s

def CMD(s):
	s = consume(“cmd”, s)
	return s

